#! /usr/bin/env python
import sys, json, os, copy

## args / options / input ##
opts = {'preview' : False, 'quiet' : False, 'flexible' : False, 'count' : False }
opt_args = {
    '-p' : 'preview',
    '--preview' : 'preview',
    '-q' : 'quiet',
    '--quiet' : 'quiet',
    '-f' : 'flexible',
    '--flexible' : 'flexible',
    '-c' : 'count',
    '--count' : 'count',
}
args = sys.argv[1:]
for oa in opt_args:
    if oa in args:
        opts[opt_args[oa]] = True
        args.remove(oa)

def print_help_and_quit():
    uz = """
Usage : jkid [options] [key1 [key2 [...]]] filename
\nWorks also with 'stdin' and no 'file' argument.
\nA key can be an object key or an array index. Array indexes can be negative.
If you have an array or an object which contains similar objects (i.e. objects that share the same name/value structure),
you can use a dot '.' as a key at some level : it will expand the json for every object at that level, allowing for
'transversal' exploration of the json. Note that in that case the following keys must be in all objects at that level.
\nOptions :
    -f / --flexible Returns null if a key is not in the object. Useful when using the dot '.' key
                    and following keys are not in all sub-objects.
    -p / --preview  Displays only one level, with information on the object's content at that level.
                    Prevents console logorrhea.
    -c / --count    For arrays, returns the length;
                    For objects, returns the number ok keys;
                    For strings, returns the length.
                    Else returns -1.
    -q / --quiet
    -h / --help
\nSee http://github.com/arthurprat/jkid
    """
    print "jkid is a command-line json explorer.\n"
    print uz
    sys.exit(0)

def error(text):
    if text:
        print text
    else:
        sys.exit(0)

def reduce_obj(objct, depth=1):
    '''This takes a json object and "unfolds" it only until ``depth`` levels. '''
    obj = copy.deepcopy(objct)
    if isinstance(obj, list):
        if depth:
            out = []
            for x in obj:
                out.append( reduce_obj(x, depth-1) )
            return out
        else:
            return "list (" + str(len(obj)) + ")"
    elif isinstance(obj, dict):
        if depth:
            out = {}
            for (key, val) in obj.items():
                out[key] = reduce_obj(val, depth-1)
            return out
        else:
            return "object with keys : " + ', '.join(obj.keys())
    else:
        return str(obj)

def get_subobj(objct, keylist, opts):
    '''This takes a json object and explore it down following the keys in ``keylist``.'''
    obj = copy.deepcopy(objct)
    for (i,k) in enumerate(keylist):
        if isinstance(obj, list):
            if k == '.':
                if i+1 < len(keylist):
                    newkl = keylist[i+1:]
                    newobj = []
                    for el in obj:
                        newobj.append(get_subobj(el, newkl, opts))
                    return newobj
                else:
                    return obj
            else:
                try:
                    k = int(k)
                except:
                    error('Error : Key for arrays must be integers (' + str(k) + ')')
                if abs(k) >= len(obj):
                    if opts['flexible']:
                        return None
                    error('Error : Requested array index greater than array length (' + str(k) + ')')
        elif isinstance(obj, dict):
            if k == '.':
                newobj = {}
                newkl = keylist[i+1:]
                for (k, x) in obj.items():
                    newobj[k] = get_subobj(x, newkl, opts)
                return newobj
            if k not in obj:
                if opts['flexible']:
                    return None
                error("Error : key '" + str(k) + "' not found in json.")
        else:
            error("Error : object must be a json object or array to be called with key " + str(k) + ".")
        obj = obj[k]
    return obj

def make_path(obj, keylist, opts):
    path = "object"
    curr = obj
    for k in keylist:
        if isinstance(curr, list):
            if k == '.':
                curr = curr[0]
            else:
                curr = curr[int(k)]
            path += '[' + k + ']'
        elif isinstance(curr, dict):
            if k == '.':
                path += '[' + k + ']'
                curr = curr[curr.keys()[0]]
            elif k in curr:
                path += '["' + k + '"]'
                curr = curr[k]
            else:
                path += '...'
                break
    return path

if '-h' in sys.argv or '--help' in sys.argv:
    print_help_and_quit()

## input ##
if not args and sys.stdin.isatty():
    print_help_and_quit()
if not os.path.isfile(args[-1]):
    if sys.stdin.isatty():
        error("No input found.")
    else:
        fil = sys.stdin
else:
    fil = open(args[-1], 'r')
    args.pop(-1)

## loading json ##
try:
    son = json.load(fil)
except Exception as e:
    error("Could not read json.\nError : " + str(e))

## go ##
KEYS = args
sub = get_subobj(son, KEYS, opts)

if not opts['quiet']:
    print make_path(son, KEYS, opts)
if opts['preview']:
    out = reduce_obj(sub)
elif opts['count']:
    if type(sub) == dict or type(sub) == list or type(sub) == str:
        out = len(sub)
    else:
        out = -1
else:
    out = sub

print json.dumps(out, sort_keys=True, indent=2)
sys.exit(0)