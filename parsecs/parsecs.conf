#!/usr/bin/env bash

# Copyright (c) 2012-15 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.


##############################
# parsecs configuration file #
##############################


### parsecs version
SCRIPT_VERSION="1.4.0 CE"

## NOTE: This is just bash script. Any parameter
## and subshell expansion available in bash is
## available here. This means you can do magical
## things, but it also means things can break
## very quickly in strange and magical ways.
## It is advised to practice the KISS rule here.

#####
##### ECS Community Edition Settings
#####

# Network device to which we should wire Docker containers
# This interface is where you'll be communicating with ECS,
# so make sure it is on a subnet accesisble to your object
# clients.
ce_netdev="ens192"

# IMPORTANT: the provisioned node's hostname will be set to
# the contents of $ce_hostname, overwriting whatever the
# current hostname is. This is a feature for those deploying
# in cloud environments where hostnames are randomly generated.
#
# Hostname to use for single-node provisioning operations.
# This must be resolvable by the contents of your
# /etc/resolv.conf file, whether by /etc/host entrie,
# DNS, or some other namespace resolver.
# The default is to use the current system hostname.
ce_hostname="$(hostname)"

# This deployment's domain name - appended to hostname when
# deriving FQDNs. Leave this at the default unless you
# know you need to change it for your environment.
domain_name="localdomain"

# Space-separated list of disks or disk-like block devices
# which will be converted into ECS storage devices.
# WARNING: Any existing partitions and data will be
# overwritten.
ce_disks="sdc sdd sde sdf sdg"

# A string that will be prefixed to all other provisioning
# object names. For example, a value of "my" here will
# cause "ecsvpool" to become "myecsvpool". This is useful
# when differentiating amongst deployments.
# The default is nothing: ""
ce_prefix=""

# What to name the various provisioning objects.
# The defaults should be OK for most scenarios,
# especially if you're trying it out for the first
# time.
ce_dsname="${ce_hostname}"
ce_vpname="${ce_prefix}ecsvpool"
ce_vaname="${ce_prefix}ecsvarray"
ce_vdcname="${ce_prefix}ecsvdc"
ce_rgname="${ce_prefix}ecsrg"
ce_nsname="${ce_prefix}ecsnamespace"
ce_username="${ce_prefix}ecsuser"

# How many nodes in this group of nodes? Parsecs refers to
# a set of nodes as a rack.
rack_size=1

# Number of datastores in a storagepool that should be in 'readytouse'
# state before attempting to create a VDC. This is usually equal to the
# number of disks in the $ce_disks setting.
sp_size=1

# Total number of VDCs we'll be creating and linking together to form
# geo replication groups.
# This is also the number of VDCs we should expect to see visible in
# the ECS API before proceeding to creating replication groups.
# This is always one (1) for ECS Community Edition deployments.
vdc_count=1

#####
##### ECS Node Networking Topology
#####

# This section is important as it defines the general topology of
# ECS nodes in the IPv4 network.
#
# These arrays map to individual rack members within a pod. A pod
# is a set of racks, and a rack is a set of nodes. It is unlikely
# that you will expand beyond one rack with ECS Community Edition,
# but anything is possible.  These settings allow you to inform
# parsecs about your node layout so that you can switch between
# racks when interacting with ECS Community Edition from the
# command line.
#
# NOTE: These arrays all begin at 1, not 0.
# Rack 1 is the 1st member of each array, &c.
# Make sure the *_root values are correct and
# the brace expansion (eg. {1..4}) ranges are
# set to the correct values for your environment.
# Examples of expansion into other racks are
# included as comments below the default values
# for rack[1].

# Hostnames
host_names_root="ecsce"
host_names[1]=$(echo ${host_names_root}{01..01})
# host_names[2]=$(echo ${host_names_root}{15..18})

# IP Ranges
ip_range_root="10.0.0."
ip_range[1]=$(echo ${ip_range_root}{50..50})
# ip_range[2]=$(echo ${ip_range_root}{140..143})

# Each rack must have a rack master. This node
# is where the VDC for the node group will be
# provisioned.  In single node deployments,
# there is only one node, so rack_master should
# be set to that node's IP.
#
# This is not *always* the first node IP in a
# given rack, but that is the default set below.
# Alternatives are shown as comments below the
# default.
_ips=(${ip_range[1]})
rack_master[1]=${_ips[0]}
unset _ips
# rack_master[1]="10.0.0.50"
# rack_master[2]="10.0.0.60"

# Netmask for the rack
ip_netmask[1]="255.255.255.0"
# ip_netmask[2]="255.255.255.0"

# Gateway for the rack
ip_gateway[1]="10.0.0.1"
# ip_gateway[2]="10.0.0.1"

# DNS servers and search domains for the rack
dns_servers[1]="10.0.0.20 10.0.0.21"
dns_search[1]="${domain_name}"
# dns_servers[2]="10.0.0.20 10.0.0.21"
# dns_search[2]="${domain_name}"

# NTP servers for the rack
ntp_servers[1]="time1.localdomain time2.localdomain"
# ntp_servers[2]="time1.localdomain time2.localdomain"

#####
##### Automation Settings
#####

# Seconds to wait for general waitloop attempts to complete
# before giving up and looping
general_timeout=300
# Seconds to wait between general waitloop attempts before
# running another attempt
general_holdtime=30
# Seconds to wait for ECS to start serving up authentication cookies.
# Make sure this is nice and long because sometimes it can take
# a while for ECS to do internal provisioning and start servicing
# authentication requests.
# This is a hard deadline to prevent the pod from getting hung due
# to an unknown defect or other transient issue.  This might not be
# a good idea in production environments, but in Beta Cloud we have
# a priority to get the pods torn down and set back up for the next
# customer as quickly as possible.
cookie_timeout=1800
# Time to wait for storage pool members to enter 'readytouse' state
# This should never take longer than seven minutes on a U300, but
# it may vary widely between different SKUs.
sp_timeout=600
# Time to wait for directory table queue to reach zero before giving
# up and aborting. This prevents pointlessly waiting for a failed
# VDC to become ready when we could be starting over.
dt_ready_timeout=1800
# time to wait for each VDC insert call to complete without error.
vdc_insert_timeout=1800
# Time to wait for VDCs to become accessible via the API
vdc_ready_timeout=1800
# Time to wait for an API call to return before it times out.
api_timeout=60
# ecs api call hold time
# doubled during waitloops
ecsapi_hold_time=15
# When script_verbose is true there is much more spam.
# this can be overridden by CLI arguments
script_verbose=${DEBUG:-true}

#####
##### VM Control Options
#####

vmware_vm="testvm"
vmware_snapshot="clean"
vmware_user="administrator"
vmware_pass="password"
vmware_server="esx01.localdomain"

#####
##### Rarely Altered Options
#####

# Where parsecs lives
script_home="$HOME/parsecs"
# where the local executable scripts live
script_bin="$script_home/libexec"
# where the logs go
script_logs="$script_home/log"
# ECS API port (usually 4443)
ecs_port="4443"
# ECS UI port (usually HTTPS)
ecs_uiport="443"
# Would you like color? This is on by default, and the
# configuration for this toggle isn't complete.
# COLORIZE=${COLORIZE:-false}
COLORIZE=true
# ECS root user and password
ecs_user="root"
ecs_pass="ChangeMe"
# A unique string within the license file to match against what
# ECS reports as the currently-installed license.
ecs_license_match="PTA06JUN20131086059"

